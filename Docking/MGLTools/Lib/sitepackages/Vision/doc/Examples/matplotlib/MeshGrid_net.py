########################################################################
#
#    Vision Network - Python source code - file generated by vision
#    Wednesday 18 April 2007 11:02:26 
#    
#       The Scripps Research Institute (TSRI)
#       Molecular Graphics Lab
#       La Jolla, CA 92037, USA
#
# Copyright: Daniel Stoffler, Michel Sanner and TSRI
#   
# revision: Guillaume Vareille
#  
#########################################################################
#
# $Header: /mnt/raid/services/cvs/python/packages/share1.5/Vision/doc/Examples/matplotlib/MeshGrid_net.py,v 1.2 2007/08/29 20:37:16 vareille Exp $
#
# $Id: MeshGrid_net.py,v 1.2 2007/08/29 20:37:16 vareille Exp $
#

from traceback import print_exc
## loading libraries ##
from Vision.matplotlibNodes import matplotliblib
masterNet.getEditor().addLibraryInstance(matplotliblib,"Vision.matplotlibNodes", "matplotliblib")

try:
    ## saving node MeshGrid ##
    from Vision.matplotlibNodes import MeshGrid
    MeshGrid_7 = MeshGrid(constrkw = {}, name='MeshGrid', library=matplotliblib)
    masterNet.addNode(MeshGrid_7,69,176)
except:
    print "WARNING: failed to restore MeshGrid named MeshGrid in network masterNet"
    print_exc()
    MeshGrid_7=None

try:
    ## saving node SinFunc ##
    from Vision.matplotlibNodes import SinFunc
    SinFunc_8 = SinFunc(constrkw = {}, name='SinFunc', library=matplotliblib)
    masterNet.addNode(SinFunc_8,50,22)
    SinFunc_8.inputPortByName['x0'].widget.set(3.0, run=False)
    SinFunc_8.inputPortByName['x1'].widget.set(7.0, run=False)
    apply(SinFunc_8.configure, (), {'expanded': True})
except:
    print "WARNING: failed to restore SinFunc named SinFunc in network masterNet"
    print_exc()
    SinFunc_8=None

try:
    ## saving node BivariateNormal ##
    from Vision.matplotlibNodes import BivariateNormal
    BivariateNormal_9 = BivariateNormal(constrkw = {}, name='BivariateNormal', library=matplotliblib)
    masterNet.addNode(BivariateNormal_9,87,258)
    BivariateNormal_9.inputPortByName['sigmax'].widget.set(4.43, run=False)
    BivariateNormal_9.inputPortByName['sigmay'].widget.set(4.71, run=False)
    BivariateNormal_9.inputPortByName['mux'].widget.set(5.0, run=False)
    BivariateNormal_9.inputPortByName['muy'].widget.set(5.0, run=False)
except:
    print "WARNING: failed to restore BivariateNormal named BivariateNormal in network masterNet"
    print_exc()
    BivariateNormal_9=None

try:
    ## saving node Contour ##
    from Vision.matplotlibNodes import ContourNE
    Contour_10 = ContourNE(constrkw = {}, name='Contour', library=matplotliblib)
    masterNet.addNode(Contour_10,57,337)
    Contour_10.inputPortByName['length_colors'].widget.set("10", run=False)
    apply(Contour_10.configure, (), {'expanded': True})
except:
    print "WARNING: failed to restore ContourNE named Contour in network masterNet"
    print_exc()
    Contour_10=None

masterNet.freeze()

## saving connections for network test-contour ##
if SinFunc_8 is not None and MeshGrid_7 is not None:
    try:
        masterNet.connectNodes(
            SinFunc_8, MeshGrid_7, "x", "x", blocking=True)
    except:
        print "WARNING: failed to restore connection between SinFunc_8 and MeshGrid_7 in network masterNet"
if SinFunc_8 is not None and MeshGrid_7 is not None:
    try:
        masterNet.connectNodes(
            SinFunc_8, MeshGrid_7, "x", "y", blocking=True)
    except:
        print "WARNING: failed to restore connection between SinFunc_8 and MeshGrid_7 in network masterNet"
if MeshGrid_7 is not None and BivariateNormal_9 is not None:
    try:
        masterNet.connectNodes(
            MeshGrid_7, BivariateNormal_9, "X", "arraylist1", blocking=True)
    except:
        print "WARNING: failed to restore connection between MeshGrid_7 and BivariateNormal_9 in network masterNet"
if MeshGrid_7 is not None and BivariateNormal_9 is not None:
    try:
        masterNet.connectNodes(
            MeshGrid_7, BivariateNormal_9, "Y", "arraylist2", blocking=True)
    except:
        print "WARNING: failed to restore connection between MeshGrid_7 and BivariateNormal_9 in network masterNet"
if BivariateNormal_9 is not None and Contour_10 is not None:
    try:
        masterNet.connectNodes(
            BivariateNormal_9, Contour_10, "z", "arraylistz", blocking=True)
    except:
        print "WARNING: failed to restore connection between BivariateNormal_9 and Contour_10 in network masterNet"
masterNet.unfreeze()
#masterNet.run()

